"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Send, Bot, User } from "lucide-react"
import "bootstrap/dist/css/bootstrap.min.css"
import { useUser } from '@auth0/nextjs-auth0/client'

export default function MobileChatbot() {
    const { user, error, isLoading } = useUser();
    const [messages, setMessages] = useState([
        {
            id: 1,
            type: "ai",
            content: "Hi there! I'm your AI assistant. How can I help you today?",
            timestamp: new Date(Date.now() - 300000),
        },
        {
            id: 2,
            type: "user",
            content: "Hello! Can you help me with my project?",
            timestamp: new Date(Date.now() - 240000),
        },
        {
            id: 3,
            type: "ai",
            content: "Of course! I'd be happy to help you with your project. What kind of project are you working on?",
            timestamp: new Date(Date.now() - 180000),
        },
        {
            id: 4,
            type: "user",
            content: "I'm building a web application and need some advice on the best practices.",
            timestamp: new Date(Date.now() - 120000),
        },
        {
            id: 5,
            type: "ai",
            content:
                "Great! Web development best practices include responsive design, accessibility, performance optimization, and clean code structure. What specific area would you like to focus on?",
            timestamp: new Date(Date.now() - 60000),
        },
    ])

    const [inputMessage, setInputMessage] = useState("")
    const [isTyping, setIsTyping] = useState(false)
    const messagesEndRef = useRef<HTMLDivElement>(null)
    const inputRef = useRef<HTMLInputElement>(null)

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
    }

    useEffect(() => {
        scrollToBottom()
    }, [messages, isTyping])

    const handleSendMessage = (e: React.FormEvent) => {
        e.preventDefault()
        if (!inputMessage.trim()) return

        const newMessage = {
            id: messages.length + 1,
            type: "user" as const,
            content: inputMessage,
            timestamp: new Date(),
        }

        setMessages((prev) => [...prev, newMessage])
        setInputMessage("")
        setIsTyping(true)

        // Simulate AI response
        setTimeout(() => {
            const aiResponse = {
                id: messages.length + 2,
                type: "ai" as const,
                content:
                    "Thanks for your message! This is a simulated AI response. In a real application, this would be generated by an AI service.",
                timestamp: new Date(),
            }
            setMessages((prev) => [...prev, aiResponse])
            setIsTyping(false)
        }, 1500)
    }

    const formatTime = (date: Date) => {
        return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
    }

    const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {
        e.currentTarget.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(user?.name || 'User')}&background=random`
    }

    if (isLoading) return <div className="d-flex justify-content-center align-items-center vh-100">
        <div className="spinner-border text-primary" role="status">
            <span className="visually-hidden">Loading...</span>
        </div>
    </div>;

    if (error) return <div className="alert alert-danger m-3" role="alert">
        {error.message}
    </div>;

    if (!user) return <div className="d-flex flex-column justify-content-center align-items-center vh-100">
        <h2 className="mb-4">Welcome to AI Chat</h2>
        <a href="/api/auth/login" className="btn btn-primary btn-lg">
            Log in to continue
        </a>
    </div>;

    return (
        <div className="chat-container">
            {/* Header */}
            <header className="bg-primary text-white shadow-sm">
                <div className="container-fluid">
                    <div className="d-flex align-items-center justify-content-between py-3">
                        <div className="d-flex align-items-center">
                            <div className="bg-white rounded-circle p-2 me-3">
                                <Bot className="text-primary" size={24} />
                            </div>
                            <div>
                                <h5 className="mb-0">AI Assistant</h5>
                                <small className="opacity-75">Online</small>
                            </div>
                        </div>
                        <div className="d-flex align-items-center">
                            <img
                                src={user.picture || ''}
                                alt={user.name || 'User'}
                                className="rounded-circle me-2 img-fluid"
                                style={{ maxHeight: '32px', width: 'auto' }}
                                onError={handleImageError}
                            />
                            <a href="/api/auth/logout" className="btn btn-outline-light btn-sm">
                                Log out
                            </a>
                        </div>
                    </div>
                </div>
            </header>

            {/* Messages Container */}
            <main className="chat-messages">
                <div className="container-fluid">
                    {messages.map((message) => (
                        <div
                            key={message.id}
                            className={`d-flex mb-3 ${message.type === "user" ? "justify-content-end" : "justify-content-start"}`}
                        >
                            <div
                                className={`d-flex ${message.type === "user" ? "flex-row-reverse" : "flex-row"} align-items-end`}
                                style={{ maxWidth: "85%" }}
                            >
                                {/* Avatar */}
                                <div className={`flex-shrink-0 ${message.type === "user" ? "ms-2" : "me-2"}`}>
                                    <div className={`rounded-circle p-2 ${message.type === "user" ? "bg-primary" : "bg-secondary"}`}>
                                        {message.type === "user" ? (
                                            <User className="text-white" size={16} />
                                        ) : (
                                            <Bot className="text-white" size={16} />
                                        )}
                                    </div>
                                </div>

                                {/* Message Bubble */}
                                <div className="flex-grow-1">
                                    <div
                                        className={`p-3 rounded-3 shadow-sm ${message.type === "user" ? "bg-primary text-white" : "bg-white border"}`}
                                    >
                                        <p className="mb-0">{message.content}</p>
                                    </div>
                                    <small className={`d-block mt-1 text-muted ${message.type === "user" ? "text-end" : "text-start"}`}>
                                        {formatTime(message.timestamp)}
                                    </small>
                                </div>
                            </div>
                        </div>
                    ))}

                    {/* Typing Indicator */}
                    {isTyping && (
                        <div className="d-flex justify-content-start mb-3">
                            <div className="d-flex align-items-end" style={{ maxWidth: "85%" }}>
                                <div className="flex-shrink-0 me-2">
                                    <div className="rounded-circle p-2 bg-secondary">
                                        <Bot className="text-white" size={16} />
                                    </div>
                                </div>
                                <div className="bg-white border rounded-3 p-3 shadow-sm">
                                    <div className="d-flex align-items-center">
                                        <div className="spinner-grow spinner-grow-sm text-secondary me-2" role="status">
                                            <span className="visually-hidden">Loading...</span>
                                        </div>
                                        <small className="text-muted">AI is typing...</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    <div ref={messagesEndRef} />
                </div>
            </main>

            {/* Input Area */}
            <footer className="chat-input-bar">
                <div className="container-fluid">
                    <form onSubmit={handleSendMessage} className="py-2">
                        <div className="input-group">
                            <input
                                ref={inputRef}
                                type="text"
                                className="form-control border-0 bg-light"
                                placeholder="Type your message..."
                                value={inputMessage}
                                onChange={(e) => setInputMessage(e.target.value)}
                                style={{ fontSize: "16px" }} // Prevents zoom on iOS
                            />
                            <button className="btn btn-primary px-4" type="submit" disabled={!inputMessage.trim() || isTyping}>
                                <Send size={18} />
                            </button>
                        </div>
                    </form>
                </div>
            </footer>
        </div>
    )
}
